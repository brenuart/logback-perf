# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.log4j1File

# Run progress: 0,00% complete, ETA 00:03:24
# Fork: 1 of 1
# Warmup Iteration   1: 178,918 ops/ms
Iteration   1: 185,009 ops/ms
Iteration   2: 185,407 ops/ms
Iteration   3: 180,688 ops/ms


Result "ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.log4j1File":
  183,702 ±(99.9%) 47,746 ops/ms [Average]
  (min, avg, max) = (180,688, 183,702, 185,407), stdev = 2,617
  CI (99.9%): [135,955, 231,448] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.log4j2AsyncFile

# Run progress: 16,67% complete, ETA 00:02:55
# Fork: 1 of 1
# Warmup Iteration   1: 423,419 ops/ms
Iteration   1: 377,319 ops/ms
Iteration   2: 396,986 ops/ms
Iteration   3: 473,197 ops/ms
<JMH had finished, but forked VM did not exit, are there stray running threads? Waiting 24 seconds more...>

Non-finished threads:

Thread[DestroyJavaVM,5,main]
  at java.base@16.0.1/java.lang.Object.wait(Native Method)
  at java.base@16.0.1/java.lang.Thread.join(Thread.java:1301)
  at java.base@16.0.1/java.lang.Thread.join(Thread.java:1369)
  at java.base@16.0.1/java.lang.ApplicationShutdownHooks.runHooks(ApplicationShutdownHooks.java:107)
  at java.base@16.0.1/java.lang.ApplicationShutdownHooks$1.run(ApplicationShutdownHooks.java:46)
  at java.base@16.0.1/java.lang.Shutdown.runHooks(Shutdown.java:130)
  at java.base@16.0.1/java.lang.Shutdown.shutdown(Shutdown.java:186)

Thread[pool-2-thread-1,5,main]
  at java.base@16.0.1/java.io.FileDescriptor.close0(Native Method)
  at java.base@16.0.1/java.io.FileDescriptor.close(FileDescriptor.java:297)
  at java.base@16.0.1/java.io.RandomAccessFile$1.close(RandomAccessFile.java:657)
  at java.base@16.0.1/java.io.FileDescriptor.closeAll(FileDescriptor.java:355)
  at java.base@16.0.1/java.io.RandomAccessFile.close(RandomAccessFile.java:655)
  at app//org.apache.logging.log4j.core.appender.RandomAccessFileManager.closeOutputStream(RandomAccessFileManager.java:105)
  at app//org.apache.logging.log4j.core.appender.OutputStreamManager.releaseSub(OutputStreamManager.java:122)
  at app//org.apache.logging.log4j.core.appender.AbstractManager.stop(AbstractManager.java:86)
  at app//org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.stop(AbstractOutputStreamAppender.java:162)
  at app//org.apache.logging.log4j.core.appender.RandomAccessFileAppender.stop(RandomAccessFileAppender.java:136)
  at app//org.apache.logging.log4j.core.config.AbstractConfiguration.stop(AbstractConfiguration.java:397)
  at app//org.apache.logging.log4j.core.LoggerContext.stop(LoggerContext.java:394)
  at app//org.apache.logging.log4j.core.async.AsyncLoggerContext.stop(AsyncLoggerContext.java:106)
  at app//org.apache.logging.log4j.core.LoggerContext$1.run(LoggerContext.java:322)
  at app//org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable.run(DefaultShutdownCallbackRegistry.java:119)
  at app//org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry.run(DefaultShutdownCallbackRegistry.java:78)
  at java.base@16.0.1/java.lang.Thread.run(Thread.java:831)




Result "ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.log4j2AsyncFile":
  415,834 ±(99.9%) 923,896 ops/ms [Average]
  (min, avg, max) = (377,319, 415,834, 473,197), stdev = 50,642
  CI (99.9%): [? 0, 1339,730] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.logbackFile

# Run progress: 33,33% complete, ETA 00:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 553,689 ops/ms
Iteration   1: 517,950 ops/ms
Iteration   2: 524,872 ops/ms
Iteration   3: 527,130 ops/ms


Result "ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.logbackFile":
  523,317 ±(99.9%) 87,260 ops/ms [Average]
  (min, avg, max) = (517,950, 523,317, 527,130), stdev = 4,783
  CI (99.9%): [436,057, 610,577] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.FileAppenderBenchmark.log4j1File

# Run progress: 50,00% complete, ETA 00:01:53
# Fork: 1 of 1
# Warmup Iteration   1: 188,019 ops/ms
Iteration   1: 178,600 ops/ms
Iteration   2: 164,788 ops/ms
Iteration   3: 169,088 ops/ms


Result "ch.qos.logback.perf.FileAppenderBenchmark.log4j1File":
  170,825 ±(99.9%) 128,954 ops/ms [Average]
  (min, avg, max) = (164,788, 170,825, 178,600), stdev = 7,068
  CI (99.9%): [41,872, 299,779] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.FileAppenderBenchmark.log4j2File

# Run progress: 66,67% complete, ETA 00:01:14
# Fork: 1 of 1
# Warmup Iteration   1: 219,481 ops/ms
Iteration   1: 213,385 ops/ms
Iteration   2: 214,664 ops/ms
Iteration   3: 217,670 ops/ms


Result "ch.qos.logback.perf.FileAppenderBenchmark.log4j2File":
  215,240 ±(99.9%) 40,130 ops/ms [Average]
  (min, avg, max) = (213,385, 215,240, 217,670), stdev = 2,200
  CI (99.9%): [175,110, 255,370] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.FileAppenderBenchmark.logbackFile

# Run progress: 83,33% complete, ETA 00:00:36
# Fork: 1 of 1
# Warmup Iteration   1: 678,633 ops/ms
Iteration   1: 676,695 ops/ms
Iteration   2: 656,625 ops/ms
Iteration   3: 658,408 ops/ms


Result "ch.qos.logback.perf.FileAppenderBenchmark.logbackFile":
  663,909 ±(99.9%) 202,663 ops/ms [Average]
  (min, avg, max) = (656,625, 663,909, 676,695), stdev = 11,109
  CI (99.9%): [461,247, 866,572] (assumes normal distribution)


# Run complete. Total time: 00:03:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt    Score     Error   Units
AsyncWithFileAppenderBenchmark.log4j1File       thrpt    3  183,702 ±  47,746  ops/ms
AsyncWithFileAppenderBenchmark.log4j2AsyncFile  thrpt    3  415,834 ± 923,896  ops/ms
AsyncWithFileAppenderBenchmark.logbackFile      thrpt    3  523,317 ±  87,260  ops/ms
FileAppenderBenchmark.log4j1File                thrpt    3  170,825 ± 128,954  ops/ms
FileAppenderBenchmark.log4j2File                thrpt    3  215,240 ±  40,130  ops/ms
FileAppenderBenchmark.logbackFile               thrpt    3  663,909 ± 202,663  ops/ms
