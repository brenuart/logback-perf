# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.log4j1File

# Run progress: 0,00% complete, ETA 00:03:24
# Fork: 1 of 1
# Warmup Iteration   1: 187,260 ops/ms
Iteration   1: 185,294 ops/ms
Iteration   2: 187,683 ops/ms
Iteration   3: 189,439 ops/ms


Result "ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.log4j1File":
  187,472 ±(99.9%) 37,952 ops/ms [Average]
  (min, avg, max) = (185,294, 187,472, 189,439), stdev = 2,080
  CI (99.9%): [149,520, 225,424] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.log4j2AsyncFile

# Run progress: 16,67% complete, ETA 00:02:55
# Fork: 1 of 1
# Warmup Iteration   1: 290,834 ops/ms
Iteration   1: 307,130 ops/ms
Iteration   2: 306,639 ops/ms
Iteration   3: 306,705 ops/ms
<JMH had finished, but forked VM did not exit, are there stray running threads? Waiting 24 seconds more...>

Non-finished threads:

Thread[DestroyJavaVM,5,main]
  at java.base@16.0.1/java.lang.Object.wait(Native Method)
  at java.base@16.0.1/java.lang.Thread.join(Thread.java:1301)
  at java.base@16.0.1/java.lang.Thread.join(Thread.java:1369)
  at java.base@16.0.1/java.lang.ApplicationShutdownHooks.runHooks(ApplicationShutdownHooks.java:107)
  at java.base@16.0.1/java.lang.ApplicationShutdownHooks$1.run(ApplicationShutdownHooks.java:46)
  at java.base@16.0.1/java.lang.Shutdown.runHooks(Shutdown.java:130)
  at java.base@16.0.1/java.lang.Shutdown.shutdown(Shutdown.java:186)

Thread[pool-2-thread-1,5,main]
  at java.base@16.0.1/java.io.FileDescriptor.close0(Native Method)
  at java.base@16.0.1/java.io.FileDescriptor.close(FileDescriptor.java:297)
  at java.base@16.0.1/java.io.RandomAccessFile$1.close(RandomAccessFile.java:657)
  at java.base@16.0.1/java.io.FileDescriptor.closeAll(FileDescriptor.java:355)
  at java.base@16.0.1/java.io.RandomAccessFile.close(RandomAccessFile.java:655)
  at app//org.apache.logging.log4j.core.appender.RandomAccessFileManager.closeOutputStream(RandomAccessFileManager.java:105)
  at app//org.apache.logging.log4j.core.appender.OutputStreamManager.releaseSub(OutputStreamManager.java:122)
  at app//org.apache.logging.log4j.core.appender.AbstractManager.stop(AbstractManager.java:86)
  at app//org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.stop(AbstractOutputStreamAppender.java:162)
  at app//org.apache.logging.log4j.core.appender.RandomAccessFileAppender.stop(RandomAccessFileAppender.java:136)
  at app//org.apache.logging.log4j.core.config.AbstractConfiguration.stop(AbstractConfiguration.java:397)
  at app//org.apache.logging.log4j.core.LoggerContext.stop(LoggerContext.java:394)
  at app//org.apache.logging.log4j.core.async.AsyncLoggerContext.stop(AsyncLoggerContext.java:106)
  at app//org.apache.logging.log4j.core.LoggerContext$1.run(LoggerContext.java:322)
  at app//org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable.run(DefaultShutdownCallbackRegistry.java:119)
  at app//org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry.run(DefaultShutdownCallbackRegistry.java:78)
  at java.base@16.0.1/java.lang.Thread.run(Thread.java:831)




Result "ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.log4j2AsyncFile":
  306,825 ±(99.9%) 4,857 ops/ms [Average]
  (min, avg, max) = (306,639, 306,825, 307,130), stdev = 0,266
  CI (99.9%): [301,968, 311,681] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.logbackFile

# Run progress: 33,33% complete, ETA 00:02:31
# Fork: 1 of 1
# Warmup Iteration   1: 555,408 ops/ms
Iteration   1: 529,876 ops/ms
Iteration   2: 542,824 ops/ms
Iteration   3: 530,432 ops/ms


Result "ch.qos.logback.perf.AsyncWithFileAppenderBenchmark.logbackFile":
  534,377 ±(99.9%) 133,548 ops/ms [Average]
  (min, avg, max) = (529,876, 534,377, 542,824), stdev = 7,320
  CI (99.9%): [400,830, 667,925] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.FileAppenderBenchmark.log4j1File

# Run progress: 50,00% complete, ETA 00:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 232,110 ops/ms
Iteration   1: 236,160 ops/ms
Iteration   2: 226,976 ops/ms
Iteration   3: 237,189 ops/ms


Result "ch.qos.logback.perf.FileAppenderBenchmark.log4j1File":
  233,442 ±(99.9%) 102,577 ops/ms [Average]
  (min, avg, max) = (226,976, 233,442, 237,189), stdev = 5,623
  CI (99.9%): [130,865, 336,019] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.FileAppenderBenchmark.log4j2File

# Run progress: 66,67% complete, ETA 00:01:12
# Fork: 1 of 1
# Warmup Iteration   1: 240,209 ops/ms
Iteration   1: 245,824 ops/ms
Iteration   2: 237,814 ops/ms
Iteration   3: 243,591 ops/ms


Result "ch.qos.logback.perf.FileAppenderBenchmark.log4j2File":
  242,409 ±(99.9%) 75,408 ops/ms [Average]
  (min, avg, max) = (237,814, 242,409, 245,824), stdev = 4,133
  CI (99.9%): [167,001, 317,817] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 16.0.1, Java HotSpot(TM) 64-Bit Server VM, 16.0.1+9-24
# VM invoker: C:\java\jdk-16.0.1\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 10 s each
# Measurement: 3 iterations, 8 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: ch.qos.logback.perf.FileAppenderBenchmark.logbackFile

# Run progress: 83,33% complete, ETA 00:00:35
# Fork: 1 of 1
# Warmup Iteration   1: 673,900 ops/ms
Iteration   1: 674,227 ops/ms
Iteration   2: 664,486 ops/ms
Iteration   3: 661,238 ops/ms


Result "ch.qos.logback.perf.FileAppenderBenchmark.logbackFile":
  666,650 ±(99.9%) 123,314 ops/ms [Average]
  (min, avg, max) = (661,238, 666,650, 674,227), stdev = 6,759
  CI (99.9%): [543,336, 789,965] (assumes normal distribution)


# Run complete. Total time: 00:03:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt    Score     Error   Units
AsyncWithFileAppenderBenchmark.log4j1File       thrpt    3  187,472 ±  37,952  ops/ms
AsyncWithFileAppenderBenchmark.log4j2AsyncFile  thrpt    3  306,825 ±   4,857  ops/ms
AsyncWithFileAppenderBenchmark.logbackFile      thrpt    3  534,377 ± 133,548  ops/ms
FileAppenderBenchmark.log4j1File                thrpt    3  233,442 ± 102,577  ops/ms
FileAppenderBenchmark.log4j2File                thrpt    3  242,409 ±  75,408  ops/ms
FileAppenderBenchmark.logbackFile               thrpt    3  666,650 ± 123,314  ops/ms
